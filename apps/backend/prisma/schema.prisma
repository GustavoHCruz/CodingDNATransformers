// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProgressTypeEnum {
  COUNTER
  PERCENTAGE
}

enum ProgressStatusEnum {
  IN_PROGRESS
  COMPLETE
  FAILED
}

model ProgressTracker {
  id           Int                @id @default(autoincrement())
  taskName     String?
  progress     Float              @default(0.0)
  progressType ProgressTypeEnum   @default(COUNTER)
  status       ProgressStatusEnum @default(IN_PROGRESS)
  info         String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

enum ApproachEnum {
  EXINCLASSIFIER
  TRIPLETCLASSIFIER
  DNATRANSLATOR
}

enum ModelTypeEnum {
  GPT
  BERT
  DNABERT
}

enum OriginEnum {
  GENBANK
  GENCODE
}

model ParentDataset {
  id          Int           @id @default(autoincrement())
  name        String
  approach    ApproachEnum
  modelType   ModelTypeEnum
  origin      OriginEnum
  recordCount Int?          @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  records ParentRecord[]
}

model ParentRecord {
  id          Int     @id @default(autoincrement())
  sequence    String
  target      String
  flankBefore String? @default("")
  flankAfter  String? @default("")
  organism    String? @default("")
  gene        String? @default("")

  parentDatasetId Int
  parentDataset   ParentDataset? @relation(fields: [parentDatasetId], references: [id], onDelete: Cascade)
  ChildRecord     ChildRecord[]

  @@unique([sequence, target, flankBefore, flankAfter, organism, gene, parentDatasetId])
}

model RawFileInfo {
  id           Int        @id @default(autoincrement())
  fileName     String
  origin       OriginEnum
  totalRecords Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model DNASequence {
  id        Int      @id @default(autoincrement())
  sequence  String
  length    Int
  accession String?
  organism  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  features FeatureSequence[]
}

enum FeatureEnum {
  EXON
  INTRON
  CDS
}

model FeatureSequence {
  id       Int         @id @default(autoincrement())
  sequence String
  length   Int
  type     FeatureEnum
  start    Int
  end      Int
  gene     String?
  strand   Int?
  before   String?
  after    String?

  dnaSequenceId Int
  dnaSequence   DNASequence? @relation(fields: [dnaSequenceId], references: [id])
}

model GenerationBatch {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  childrenDataset ChildDataset[]
}

model ChildDataset {
  id          Int           @id @default(autoincrement())
  name        String
  approach    ApproachEnum
  modelType   ModelTypeEnum
  recordCount Int?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  batchId         Int
  GenerationBatch GenerationBatch? @relation(fields: [batchId], references: [id], onDelete: Cascade)

  records      ChildRecord[]
  trainHistory TrainHistory[] @relation(name: "trainDataset")
  evalHistory  TrainHistory[] @relation(name: "evalDataset")
}

model ChildRecord {
  id Int @id @default(autoincrement())

  childDatasetId Int
  childDataset   ChildDataset? @relation(fields: [childDatasetId], references: [id], onDelete: Cascade)

  parentRecordId Int
  parentRecord   ParentRecord? @relation(fields: [parentRecordId], references: [id], onDelete: Cascade)
}

model ModelHistory {
  id             Int          @id @default(autoincrement())
  modelAlias     String
  checkpointName String
  approach       ApproachEnum
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  parentId Int?
  parent   ModelHistory?  @relation("ModelParentChild", fields: [parentId], references: [id])
  children ModelHistory[] @relation("ModelParentChild")

  trainHistories TrainHistory[]
  evalHistories  EvalHistory[]
}

model TrainHistory {
  id                   Int      @id @default(autoincrement())
  learningRate         Int
  batchSize            Int
  gradientAccumulation Int
  warmupRatio          Float
  epochs               Int
  hideProb             Float?
  lora                 Boolean  @default(false)
  loss                 Float
  durationSec          Int
  seed                 Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  modelId Int
  model   ModelHistory? @relation(fields: [modelId], references: [id], onDelete: Cascade)

  trainDatasetId Int?
  trainDataset   ChildDataset? @relation(name: "trainDataset", fields: [trainDatasetId], references: [id], onDelete: SetNull)

  evalDatasetId Int?
  evalDataset   ChildDataset? @relation(name: "evalDataset", fields: [evalDatasetId], references: [id], onDelete: SetNull)
}

model EvalHistory {
  id          Int      @id @default(autoincrement())
  loss        Float
  accuracy    Float
  durationSec Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  modelId Int
  model   ModelHistory? @relation(fields: [modelId], references: [id], onDelete: Cascade)
}
